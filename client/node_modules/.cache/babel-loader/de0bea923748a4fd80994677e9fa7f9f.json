{"ast":null,"code":"var _jsxFileName = \"/Users/ganesh/Desktop/OMSCS/DBMS/Phase1/CS6400-2020-02-Team26/Phase_3/client/src/containers/MonthlyAdoptionReport.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { getData } from \"../services/api\";\nimport { isLoggedIn } from \"../services/auth\";\n\nfunction getMonthName(monthNum) {\n  switch (monthNum) {\n    case 0:\n      return \"January\";\n\n    case 1:\n      return \"February\";\n\n    case 2:\n      return \"March\";\n\n    case 3:\n      return \"April\";\n\n    case 4:\n      return \"May\";\n\n    case 5:\n      return \"June\";\n\n    case 6:\n      return \"July\";\n\n    case 7:\n      return \"August\";\n\n    case 8:\n      return \"September\";\n\n    case 9:\n      return \"October\";\n\n    case 10:\n      return \"November\";\n\n    case 11:\n      return \"December\";\n\n    default:\n      return \"month\";\n  }\n}\n\nfunction GetMonthOffset(offset) {\n  let today = new Date();\n  today.setMonth(today.getMonth() + offset);\n  return getMonthName(today.getMonth()) + \" \" + today.getFullYear();\n}\n\nconst MonthlyAdoptionReport = () => {\n  const [state, setState] = useState({\n    data: {},\n    errorMessage: \"\",\n    loginRedirect: false,\n    cookie: {}\n  }); // check auth\n\n  useEffect(() => {\n    const cookie = isLoggedIn();\n\n    if (cookie.hasOwnProperty(\"isTrustedVolunteer\") && cookie.isTrustedVolunteer) {\n      setState({ ...state,\n        cookie\n      });\n    }\n    /* eslint-disable react-hooks/exhaustive-deps */\n\n  }, []);\n  useEffect(() => {\n    // var i =0;\n    // for ( i = -11; i <= -10; i++ )\n    // {\n    UpdateTables(-10); // }\n  }, [state.cookie]);\n\n  function UpdateTables(ind) {\n    // if (state.cookie.hasOwnProperty(\"isTrustedVolunteer\") && state.cookie.isTrustedVolunteer) {\n    getData(\"/monthly-adoption-report?month=-10\").then(({\n      target\n    }) => {\n      if (target.status === 200) {\n        const dataDict = state.data;\n        dataDict[-10] = JSON.parse(target.response); // dataDict[\"10\"].map(stuff =>{\n        //    window.alert (JSON.stringify(stuff))\n        // })\n\n        setState({ ...state,\n          data: dataDict\n        }); // window.alert(\"Updating\")\n        // state.data[\"10\"].map(stuff=>{\n        //\n        //     // window.alert(JSON.stringify(stuff))\n        //\n        // })\n        // window.alert(JSON.stringify(state.data[\"10\"]))\n      } else {\n        setState({ ...state,\n          errorMessage: target.response\n        });\n      }\n    }).catch(error => {\n      console.log(error);\n      setState({ ...state,\n        errorMessage: JSON.stringify(error)\n      });\n    }); // }\n  }\n\n  function getTableValues() {\n    var indices = [];\n    var i = 0;\n\n    for (i = -11; i <= 0; i++) {\n      indices.push(i);\n    }\n\n    return indices.map(indx => {\n      if (indx in state.data) {\n        return;\n        indx // <tr>\n        //     <td>\n        //         <h3>GetMonthOffset(indx)</h3></td>\n        //     <td></td>\n        //     <td></td>\n        //     <td></td>\n        //     <td></td>\n        //     <td></td>\n        // </tr>\n        //     state.data[indx].map(datum =>\n        //         {return\n        //         (<tr>\n        //             <td>{datum.breed}</td>\n        //             <td>{datum.SurrenderCount.Float64}</td>\n        //             <td>{datum.AdoptionCount.Float64}</td>\n        //             <td>{datum.Expenses.Float64}</td>\n        //             <td>{datum.AdoptionFees.Float64}</td>\n        //             <td>{datum.Profit.Float64}</td>\n        //         </tr>)\n        //\n        //\n        ;\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }\n  }, \"Monthly Adoption Report\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }\n  }, GetMonthOffset(-18)), /*#__PURE__*/React.createElement(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 21\n    }\n  }, \"Breed\"), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 21\n    }\n  }, \"Surrender Count\"), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 21\n    }\n  }, \"Adoption Count\"), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 21\n    }\n  }, \"Expenses\"), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 21\n    }\n  }, \"Adoption Fees\"), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 21\n    }\n  }, \"Profit\")), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 17\n    }\n  }, getTableValues())), state.errorMessage && /*#__PURE__*/React.createElement(\"div\", {\n    styles: {\n      color: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 17\n    }\n  }, state.errorMessage));\n};\n\nexport default MonthlyAdoptionReport;","map":{"version":3,"sources":["/Users/ganesh/Desktop/OMSCS/DBMS/Phase1/CS6400-2020-02-Team26/Phase_3/client/src/containers/MonthlyAdoptionReport.js"],"names":["React","useEffect","useState","getData","isLoggedIn","getMonthName","monthNum","GetMonthOffset","offset","today","Date","setMonth","getMonth","getFullYear","MonthlyAdoptionReport","state","setState","data","errorMessage","loginRedirect","cookie","hasOwnProperty","isTrustedVolunteer","UpdateTables","ind","then","target","status","dataDict","JSON","parse","response","catch","error","console","log","stringify","getTableValues","indices","i","push","map","indx","color"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\n\nimport {getData} from \"../services/api\";\nimport {isLoggedIn} from \"../services/auth\";\n\nfunction getMonthName(monthNum) {\n    switch (monthNum) {\n        case 0: return \"January\"\n        case 1: return \"February\"\n        case 2: return \"March\"\n        case 3: return \"April\"\n        case 4: return \"May\"\n        case 5: return \"June\"\n        case 6: return \"July\"\n        case 7: return \"August\"\n        case 8: return \"September\"\n        case 9: return \"October\"\n        case 10: return \"November\"\n        case 11: return \"December\"\n\n        default: return \"month\"\n\n    }\n}\n\nfunction GetMonthOffset(offset) {\n    let today = new Date()\n    today.setMonth(today.getMonth() + offset)\n\n    return getMonthName(today.getMonth()) + \" \" + today.getFullYear()\n}\n\nconst MonthlyAdoptionReport = () => {\n\n    const [state, setState] = useState({\n        data: {},\n        errorMessage: \"\",\n        loginRedirect: false,\n        cookie: {}\n    });\n\n    // check auth\n    useEffect(() => {\n        const cookie = isLoggedIn();\n        if (cookie.hasOwnProperty(\"isTrustedVolunteer\") && cookie.isTrustedVolunteer) {\n            setState({ ...state, cookie });\n        }\n        /* eslint-disable react-hooks/exhaustive-deps */\n    }, []);\n\n    useEffect(() => {\n        // var i =0;\n        // for ( i = -11; i <= -10; i++ )\n        // {\n            UpdateTables(-10)\n        // }\n\n    }, [state.cookie]);\n\n    function UpdateTables(ind) {\n\n        // if (state.cookie.hasOwnProperty(\"isTrustedVolunteer\") && state.cookie.isTrustedVolunteer) {\n        getData(\"/monthly-adoption-report?month=-10\")\n            .then(({ target }) => {\n                if (target.status === 200) {\n\n                    const dataDict = state.data\n                    dataDict[-10] =JSON.parse(target.response)\n                    // dataDict[\"10\"].map(stuff =>{\n                    //    window.alert (JSON.stringify(stuff))\n                    // })\n                    setState({ ...state, data:dataDict});\n// window.alert(\"Updating\")\n// state.data[\"10\"].map(stuff=>{\n//\n//     // window.alert(JSON.stringify(stuff))\n//\n// })\n                    // window.alert(JSON.stringify(state.data[\"10\"]))\n                } else {\n                    setState({ ...state, errorMessage: target.response });\n                }\n            })\n            .catch(error => {\n                console.log(error);\n                setState({ ...state, errorMessage: JSON.stringify(error) });\n            })\n        // }\n    }\n\n    function getTableValues(){\n        var indices = [];\n        var i = 0;\n        for (i = -11;i<=0; i++)\n        {\n            indices.push(i);\n        }\n\n        return (\n                indices.map(indx=>\n                    { if(indx in state.data) {\n                        return\n                    (\n                    indx\n                        // <tr>\n                        //     <td>\n                        //         <h3>GetMonthOffset(indx)</h3></td>\n                        //     <td></td>\n                        //     <td></td>\n                        //     <td></td>\n                        //     <td></td>\n                        //     <td></td>\n                        // </tr>\n\n                    //     state.data[indx].map(datum =>\n                    //         {return\n                    //         (<tr>\n                    //             <td>{datum.breed}</td>\n                    //             <td>{datum.SurrenderCount.Float64}</td>\n                    //             <td>{datum.AdoptionCount.Float64}</td>\n                    //             <td>{datum.Expenses.Float64}</td>\n                    //             <td>{datum.AdoptionFees.Float64}</td>\n                    //             <td>{datum.Profit.Float64}</td>\n                    //         </tr>)\n                    //\n                    //\n                        )\n\n\n\n    }\n                    }\n\n                )\n\n        )\n    }\n\n    return (\n        <>\n            {/*<NavLinks isTrustedVolunteer={state.cookie.isTrustedVolunteer} />*/}\n            <h1>Monthly Adoption Report</h1>\n            <p>{GetMonthOffset(-18)}</p>\n            <table>\n                <thead>\n                    <td>Breed</td>\n                    <td>Surrender Count</td>\n                    <td>Adoption Count</td>\n                    <td>Expenses</td>\n                    <td>Adoption Fees</td>\n                    <td>Profit</td>\n                </thead>\n                <tbody>\n                {\ngetTableValues()\n                }\n                </tbody>\n            </table>\n\n            {state.errorMessage && (\n                <div styles={{ color: \"red\" }}>{state.errorMessage}</div>\n            )}\n        </>\n    );\n}\n\nexport default MonthlyAdoptionReport;\n\n"]},"metadata":{},"sourceType":"module"}